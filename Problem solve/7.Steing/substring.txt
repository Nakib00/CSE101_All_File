#include <iostream>
using namespace std;
int isEqual(char[], char[], int);
int isSubstring(char[], int, char[], int);
int strcopy(char[], char[], int, int);
int main(){

char s[20], t[20];
int n , p;
char_array_initialize(s, 20);
char_array_initialize(t, 20);
n = char_array_input(s);
p = char_array_input(t);
if(isSubstring(s, n, t, p) == 1){
cout << t << " is a substring of " << s;
}
else{
cout << t << " is not a substring of " << s;
}
}

//function to see if two char arrays are equal or not
int isEqual(char a[], char b[], int length)
{
int i, eq;
eq = 1;
for(i = 0; i < length; i++){
if(a[i] != b[i]){
eq = 0;
break;
}
}
return eq;
}

//copies string from a specific position till a specific position
int strcopy(char cpy[], char copy_from[], int pos_of_copy, int copy_till)
{
int i;
for(i = pos_of_copy; i <= copy_till; i++){
cpy[i - pos_of_copy] = copy_from[i];
}
return copy_till - pos_of_copy + 1;
}

//checks if a string is substring of another string
int isSubstring(char large_string[], int size_of_large_string, char substring[], int size_of_substring)
{
int i, result, length_temp;
char temp[20];
result = 0;
for (i = 0; i <= size_of_large_string - size_of_substring; i = i + 1)
{
char_array_initialize(temp, 20);
length_temp = strcopy(temp,large_string, i, ( (i + size_of_substring) -1) );
result = isEqual(temp, substring, size_of_substring);
if(result == 1){
break;
}
}
return result;
}